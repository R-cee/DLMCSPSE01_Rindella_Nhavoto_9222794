{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./Notifications.css';import HostHeader from'./HostHeader';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const Notifications=()=>{const[notifications,setNotifications]=useState([]);const[error,setError]=useState(null);const[userRole,setUserRole]=useState('');// Start with an empty string\nuseEffect(()=>{const fetchUserRole=()=>{const storedUser=localStorage.getItem('user');console.log(\"Stored User: \",storedUser);// Debug log to check if user exists\nif(storedUser){const user=JSON.parse(storedUser);console.log(\"Parsed User Role: \",user.role);// Log user role\nif(user&&user.role){setUserRole(user.role);}}};fetchUserRole();fetchNotifications();},[]);const fetchNotifications=async()=>{try{const token=localStorage.getItem('jwt_token');const response=await fetch('/notifications',{headers:{'Authorization':`Bearer ${token}`}});if(response.ok){const data=await response.json();setNotifications(data.notifications);markNotificationsAsRead();}else{setError('Failed to fetch notifications');}}catch(error){setError('Error fetching notifications');}};const markNotificationsAsRead=async()=>{try{const token=localStorage.getItem('jwt_token');await fetch('/notifications/mark-as-read',{method:'POST',headers:{'Authorization':`Bearer ${token}`}});}catch(error){setError('Failed to mark notifications as read');}};// Log userRole to ensure it gets updated\nconsole.log(\"Current User Role: \",userRole);return/*#__PURE__*/_jsxs(\"div\",{className:\"notifications-container\",children:[userRole==='EventHost'?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(HostHeader,{}),/*#__PURE__*/_jsx(\"h2\",{children:\"Notifications\"})]}):/*#__PURE__*/_jsxs(\"h2\",{children:[\"No Host Header - Current role: \",userRole]})// Debug if HostHeader is not displayed\n,error&&/*#__PURE__*/_jsx(\"p\",{className:\"error\",children:error}),/*#__PURE__*/_jsxs(\"table\",{className:\"notifications-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Message\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Date\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:notifications.length>0?notifications.map((notification,index)=>/*#__PURE__*/_jsxs(\"tr\",{className:notification.is_read?\"notification-item read\":\"notification-item unread\",children:[/*#__PURE__*/_jsx(\"td\",{children:notification.message}),/*#__PURE__*/_jsx(\"td\",{children:new Date(notification.created_at).toLocaleString()})]},index)):/*#__PURE__*/_jsx(\"tr\",{children:/*#__PURE__*/_jsx(\"td\",{colSpan:\"3\",children:\"No notifications available.\"})})})]})]});};export default Notifications;","map":{"version":3,"names":["React","useState","useEffect","HostHeader","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Notifications","notifications","setNotifications","error","setError","userRole","setUserRole","fetchUserRole","storedUser","localStorage","getItem","console","log","user","JSON","parse","role","fetchNotifications","token","response","fetch","headers","ok","data","json","markNotificationsAsRead","method","className","children","length","map","notification","index","is_read","message","Date","created_at","toLocaleString","colSpan"],"sources":["C:/Users/Rindella Nhavoto/Desktop/ProjectsVSC/SWEproject/EventsGit/DLMCSPSE01_Rindella_Nhavoto_9222794/events-system-frontend/src/components/Notification.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Notifications.css';\r\nimport HostHeader from './HostHeader';\r\n\r\nconst Notifications = () => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [userRole, setUserRole] = useState(''); // Start with an empty string\r\n\r\n  useEffect(() => {\r\n    const fetchUserRole = () => {\r\n      const storedUser = localStorage.getItem('user');\r\n      console.log(\"Stored User: \", storedUser); // Debug log to check if user exists\r\n\r\n      if (storedUser) {\r\n        const user = JSON.parse(storedUser);\r\n        console.log(\"Parsed User Role: \", user.role); // Log user role\r\n        if (user && user.role) {\r\n          setUserRole(user.role);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchUserRole();\r\n    fetchNotifications();\r\n  }, []);\r\n\r\n  const fetchNotifications = async () => {\r\n    try {\r\n      const token = localStorage.getItem('jwt_token');\r\n      const response = await fetch('/notifications', {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setNotifications(data.notifications);\r\n        markNotificationsAsRead();\r\n      } else {\r\n        setError('Failed to fetch notifications');\r\n      }\r\n    } catch (error) {\r\n      setError('Error fetching notifications');\r\n    }\r\n  };\r\n\r\n  const markNotificationsAsRead = async () => {\r\n    try {\r\n      const token = localStorage.getItem('jwt_token');\r\n      await fetch('/notifications/mark-as-read', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      setError('Failed to mark notifications as read');\r\n    }\r\n  };\r\n\r\n  // Log userRole to ensure it gets updated\r\n  console.log(\"Current User Role: \", userRole);\r\n\r\n  return (\r\n    <div className=\"notifications-container\">\r\n      {/* Only display HostHeader if userRole is EventHost */}\r\n      {userRole === 'EventHost' ? (\r\n        <>\r\n          <HostHeader />\r\n          <h2>Notifications</h2>\r\n        </>\r\n      ) : (\r\n        <h2>No Host Header - Current role: {userRole}</h2> // Debug if HostHeader is not displayed\r\n      )}\r\n\r\n      {error && <p className=\"error\">{error}</p>}\r\n      <table className=\"notifications-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Message</th>\r\n            <th>Date</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {notifications.length > 0 ? (\r\n            notifications.map((notification, index) => (\r\n              <tr \r\n                key={index} \r\n                className={notification.is_read ? \"notification-item read\" : \"notification-item unread\"}\r\n              >\r\n                <td>{notification.message}</td>\r\n                <td>{new Date(notification.created_at).toLocaleString()}</td>\r\n              </tr>\r\n            ))\r\n          ) : (\r\n            <tr>\r\n              <td colSpan=\"3\">No notifications available.</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notifications;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}